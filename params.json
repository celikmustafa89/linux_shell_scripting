{
  "name": "Shell Scripting",
  "tagline": "",
  "body": "# SHELL SCRIPTING #\r\n1.  Shell Scripting Tutorial-1  : **Introduction**  \r\n2.  Shell Scripting Tutorial-2  : **Shell, Kernel, Terminal & More**  \r\n3.  Shell Scripting Tutorial-3  : **View System Date, Calender**  \r\n4.  Shell Scripting Tutorial-4  : **Create Files & Directories**  \r\n5.  Shell Scripting Tutorial-5  : **Text Files: Create, Merge & Play**  \r\n6.  Shell Scripting Tutorial-6  : **Rename & Delete Files & Directories**  \r\n7.  Shell Scripting Tutorial-7  : **Create Copies, Links to Files & Directories**  \r\n8.  Shell Scripting Tutorial-8  : **File Permissions**  \r\n9.  Shell Scripting Tutorial-9  : **See What's In Using '*ls*'**  \r\n10. Shell Scripting Tutorial-10: **Change File Permissions Using '*chmod*'**  \r\n11. Shell Scripting Tutorial-11: **Count Lines, Words & Characters Using '*wc*'**  \r\n12. Shell Scripting Tutorial-12: **Sort**  \r\n13. Shell Scripting Tutorial-13: **Cut Through Your Files**  \r\n14. Shell Scripting Tutorial-14: **Convert & Copy Files With '*dd*'**  \r\n15. Shell Scripting Tutorial-15: **Get Help, View Fancy Text & Reduce File Size**  \r\n16. Shell Scripting Tutorial-16: **Hello World!**  \r\n17. Shell Scripting Tutorial-17: **Use Commands In Your Scripts**  \r\n18. Shell Scripting Tutorial-18: **Shell Variables, Grab User Input Using 'read'**  \r\n19. Shell Scripting Tutorial-19: **Positional Parameters**  \r\n20. Shell Scripting Tutorial-20: **More On Positional Parameters**  \r\n21. Shell Scripting Tutorial-21: **Reverse Quotes Or Accent Graves**  \r\n22. Shell Scripting Tutorial-22: **Count The Number of Command Line Arguments Using $**  \r\n23. Shell Scripting Tutorial-23: **Math On Integers Using 'expr'**  \r\n24. Shell Scripting Tutorial-24: **Operator Precedence**  \r\n25. Shell Scripting Tutorial-25: **Math On Real Numbers**  \r\n26. Shell Scripting Tutorial-26: **Escape Sequences**  \r\n27. Shell Scripting Tutorial-27: **Do Cool Things With 'tput'**  \r\n28. Shell Scripting Tutorial-28: **'if-then' Statement in Action**  \r\n29. Shell Scripting Tutorial-29: **The 'if-then-else' Statement**  \r\n30. Shell Scripting Tutorial-30: **Run Checks on Numbers**  \r\n31. Shell Scripting Tutorial-31: **Run Checks On Files**  \r\n32. Shell Scripting Tutorial-32: **Append Text to a File Through Shell Script**  \r\n33. Shell Scripting Tutorial-33: **Run Checks On Strings**  \r\n34. Shell Scripting Tutorial-34: **The 'AND' Logical Operator**  \r\n35. Shell Scripting Tutorial-35: **Count The Number of Characters in User's Input in Your Script**  \r\n36. Shell Scripting Tutorial-36: **The 'OR' Logical Operator**  \r\n37. Shell Scripting Tutorial-37: **The 'case' Statement**  \r\n38. Shell Scripting Tutorial-38: **Another Date With 'case' Statement**  \r\n39. Shell Scripting Tutorial-39: **The 'while' Loop**  \r\n40. Shell Scripting Tutorial-40: **The 'until' Loop**  \r\n41. Shell Scripting Tutorial-41: **The 'for' Loop**  \r\n42. Shell Scripting Tutorial-42: **Rant & Little Work**  \r\n43. Shell Scripting Tutorial-43: **Search Patterns Using 'grep'**  \r\n44. Shell Scripting Tutorial-44: **The 'passwd' File Explained**  \r\n45. Shell Scripting Tutorial-45: **The Internal Field Separator**  \r\n46. Shell Scripting Tutorial-46: **'passwd' File Revisited**  \r\n47. Shell Scripting Tutorial-47: **Reading From a File**  \r\n48. Shell Scripting Tutorial-48: **Sleep while you are at work**  \r\n49. Shell Scripting Tutorial-49: **Count the number of words & sentences in a text file without using 'wc'**  \r\n50. Shell Scripting Tutorial-50: **Fetch & Redirect Man Pages of commands using 'for loop'**  \r\n51. Shell Scripting Tutorial-51: **Nested Loops**  \r\n52. Shell Scripting Tutorial-52: **The 'break' Statement**  \r\n53. Shell Scripting Tutorial-53: **The 'continue' Statement**  \r\n54. Shell Scripting Tutorial-54: **More on Metacharacters**  \r\n55. Shell Scripting Tutorial-55: **Adding & Removing Users**  \r\n56. Shell Scripting Tutorial-56: **Know when users log in Part One**  \r\n57. Shell Scripting Tutorial-57: **Know when users log in Part Two**  \r\n58. Shell Scripting Tutorial-58: **Know when users log in Final Part**  \r\n59. Shell Scripting Tutorial-59: **Communicate with other users using 'write'**  \r\n60. Shell Scripting Tutorial-60: **Create Your Own Commands Using Functions**  \r\n61. Shell Scripting Tutorial-61: **Executing Multiple Scripts**  \r\n\r\n\r\n\r\n##**Shell Scripting Tutorial-1:** _Introduction_ ##\r\n\r\n- Install a linux distribution.\r\n\r\n## **Shell Scripting Tutorial-2:** _Shell, Kernel, Terminal and More_ ##\r\n\r\n**Shell** is an interface between user and the UNIX Kernel.  \r\n**UNIX Kernel** manages the resources and hardware.  \r\n**Terminal** provides access to shell.  \r\n  \r\n\\<username>@\\<machinename>:~$ terminal commands must be lowercase.  \r\n  \r\n\r\n| Command  | Description |\r\n|---|---|\r\n| `who am i` | shows user name, terminal number, date |\r\n| `whoami` | shows only user name |\r\n| `pwd` | prints the working directory |\r\n\r\n##**Shell Scripting Tutorial-3:** _View System Date, Calender_ ##\r\n\r\n### Calender ###\r\ncalender commands:  \r\n  \r\n| Command  | Description |\r\n|---|---|\r\n| `cal`  | prints the calender |\r\n| `cal 7 2006` | prints july 2006 |\r\n| `cal feb 2033` | prints february 2033|\r\n  \r\n### Date ###\r\n**date** command prints date as _**Mon Aug  8 14:37:04 EEST 2016**_.  \r\n  \r\nOutput of date command can be customized.  \r\n$ date '+DATE: %m-%y%nTIME: %H:%M:%S'  \r\ndate commands:  \r\n  \r\n| Command  | Description |\r\n|---|---|\r\n| `date`  | prints date as \"Mon Aug  8 14:37:04 EEST 2016\" |\r\n| `date '+DATE: %m-%y%nTIME: %H:%M:%S'` | prints date as \"DATE: 08-16 TIME: 14:40:33\"|\r\n\r\n##**Shell Scripting Tutorial-4:** _Create Files & Directories_ ##\r\n\r\n**touch** is used to create empty files.  \r\n**mkdir** is used to create empty folder.  \r\n**cd** is used to navigate inside folders.  \r\n\r\n| Command | Description |\r\n|---|---|\r\n| `touch empty_file1 empty_file2` | creates two empty files|\r\n| `mkdir folder1` | creates a folder in working directory |\r\n| `mkdir Documents/folder1` | creates a folder in Documents directory |\r\n\r\n##**Shell Scripting Tutorial-5:** _Text Files: Create, Merge & Play_ ##\r\n\r\n**cat** creates file with text.  \r\n`$ cat > test_file`  \r\n`test_file content bla bla..  `  \r\n  \r\n**cat** shows content of the file.  \r\n`$ cat test_file`  \r\n`$ cat < test_file`  \r\n\r\n\r\n| Command | Description |\r\n|---|---|\r\n| `cat > test_file` | creates file with text | \r\n| `cat < test_file` | prints the content |\r\n| `cat test_file` | prints the content |\r\n| `cat > test_file2` | creates file with text |\r\n| `cat test_file test_file2 > merged_test_files` | merge two files |\r\n| `cat < merged_test_files` | shows both test files' content |\r\n\r\n##**Shell Scripting Tutorial-6:** _Rename & Delete Files & Directories_ ##\r\n\r\n\r\n### Rename Files & Directories ###\r\n**mv** renames files and directories  \r\n`mv file1 file2`  \r\n\r\n### Delete Files & Directories ###\r\n**rm** deletes file  \r\n`rm file`  \r\n\r\n**rm -r** deletes directory  \r\n`rm -r directory/`  \r\n\r\n**rmdir** deletes empty directory  \r\n`rmdir empty_directory`  \r\n\r\n| Command | Description |\r\n|---|---|\r\n| `mv file1 file2` | renames the file |\r\n| `mv directory1 directory2` | renames the directory |\r\n| `rm file2` | deletes the file |\r\n| `rm -r directory2` | deletes the directory |\r\n| `rmdir empty_directory` | deletes the empty directory |\r\n\r\n##**Shell Scripting Tutorial-7:** _Create Copies, Links to Files & Directories_ ##\r\n\r\n### Copy Files ###\r\n**cp** is used to copy files from one location to other.  \r\n**cp** copies the file **mv** cuts and pastes the file.  \r\n`cp file /home/Music/file_new_name`  \r\n\r\n### Links ###\r\n**ln** creates hard link for a file.   \r\n**Hard link** is replica of original one.  \r\nAny changes from old file, also exists in new one.  \r\nRemoving the original one does not effect new one.  \r\n`ln old_file new_file`  \r\n\r\n**ln -s** creates soft link.  \r\nAny changes from old file, also exists in new one.  \r\nRemoving the original makes soft link useless.  \r\n`ln -s old old_soft`  \r\n\r\n| Command | Description |\r\n|---|---|\r\n| `cp old_file /home/Music/new_file` | copy files to new location with new name |\r\n| `ln file hard_file` | creates a hard link |\r\n| `ln -s file soft_file` | creates a soft link |\r\n\r\n##**Shell Scripting Tutorial-8:** _File Permissions_ ##\r\n\r\n### File Permission ###\r\n**owner**, **group** and **other** are 3 permission part.  \r\n\r\n**read**, **write** and **execute** are 3 type of permission.  \r\n- **read**: has numeric value \"**4**\".  \r\n- **write**: has numeric value \"**2**\".  \r\n- **execute**: has numeric value \"**1**\".  \r\n\r\n### \"umask\" Usage ###\r\n\r\n**umask** is used to specify permission values.  \r\nAssume **umask** value is **_0022_**.  \r\n`file permission = 666 - 022 = 644` which means owner(read, write=6), group(read=4), other(read=4)  \r\n`directory permission = 777 - 022 = 755` which means owner(read, write, execute=7), group/other(read, execute=5)  \r\n\r\n| Command | Description |\r\n|---|---|\r\n| `umask` | shows file and directory permission creation base number |\r\n\r\n##**Shell Scripting Tutorial-9:** _See What's Using in 'ls'_ ##\r\n\r\n### Usage of 'ls' ###\r\n\r\n**ls** shows the list of files and directories.  \r\n`ls -l` shows the following  \r\n`total 4`  \r\n`-rw-r--r-- 2 joker joker    0 Aug  9 13:58 forrest_village`  \r\n`-rw-r--r-- 2 joker joker    0 Aug  9 13:58 new`  \r\n`-rw-r--r-- 1 joker joker    0 Aug  9 15:10 sample`  \r\n`drwxr-xr-x 2 joker joker 4096 Aug  9 14:05 sdf`    \r\n\r\n**\"d\"** letter at the beginnig of the last line shows that it is a **directory**.  \r\nAny **\"l\"** letter at the beginning of the line shows that it is a **soft link**.  \r\n\r\nNext characters shows the permissions owner(read,write,execute)group(read,write,execute)other(read,write,execute)  \r\n\r\n### Hidden files and 'ls -a' ###\r\n\r\nHidden files are created using . at the beginning of the file name.  \r\n`touch .test`  \r\n\r\n`ls -a` shows all files in the directory, inclued hidden files.  \r\n\r\n| Command | Description |\r\n|---|---|\r\n| `ls` | lists files and directories |\r\n| `ls -l` | lists files and directories with permissions |\r\n| `touch .test` | creates a hidden file |\r\n| `ls -a` | list all files and directories including hidden ones |\r\n\r\n##**Shell Scripting Tutorial-10:** _Change File Permissions Using 'chmod'_ ##\r\n\r\n### Usage of 'chmod' ###\r\n\r\n`**chmod**` changes file permissions.  \r\n`chmod 777 test` gives read, write and execute permissions to owner,group and other  \r\n\r\n### Usage of 'uname' ###\r\n`**uname**` shows all about machine.  \r\n`$ uname -a` \r\noutput:  \r\n`**Linux joker 3.16.0-38-generic #52~14.04.1-Ubuntu SMP Fri May 8 09:43:57 UTC 2015 x86_64 x86_64 x86_64 GNU/Linux**`  \r\n\r\n\r\n| Command | Description |\r\n|---|---|\r\n|`chmod 777 test` | gives all permissions to all users |\r\n|`uname -a` | shows all details about machine and kernel |\r\n\r\n##**Shell Scripting Tutorial-11:** _Count Lines, Words & Characters Using 'wc'_ ##\r\n\r\n### Usage of 'file' ###\r\n\r\n**`file`** shows the type of files.  \r\n`file *`  \r\noutput:  \r\n`aaa:             symbolic link to 'new' `  \r\n`bbb:             empty `  \r\n`forrest_village: empty `  \r\n`jazz:            ASCII text`    \r\n`new:             empty `  \r\n`sdf:             directory`  \r\n\r\n### Usage of 'wc' ###\r\n\r\n`**wc file**`  \r\noutput:  \r\n`4  7 48 file`  \r\n4 : number of lines  \r\n7 : number of words  \r\n48: number of characters  \r\n\r\n`wc -l file` show line count  \r\n`wc -w file` show word count  \r\n`wc -c file` show character count  \r\n\r\n| Command | Description |\r\n|---|---|\r\n| `file *` | shows file types of all files |\r\n| `wc file` | shows number of lines, words and chracters of file |\r\n| `wc -l file` | shows number of lines |\r\n| `wc -w file` | shows number of words |\r\n| `wc -c file` | shows number of chracters |\r\n\r\n##**Shell Scripting Tutorial-12:** _Sort_ ##\r\n\r\n### Usage of 'sort' ###\r\n\r\n| Command | Description |\r\n|---|---|\r\n| `sort animals` | sorts alphabetically the lines of file |\r\n\r\n##**Shell Scripting Tutorial-13:** _Cut Through Your Files_ ##\r\n\r\n### Usage of 'cut' ###\r\n\r\n**`cut`** uses - as default saperater.  \r\n`cut -d\"-\" -f 1,3 file_name`  \r\n\r\n**_-d_**: specify the delimeter character  \r\n**_-f_**: specify the fields that will be printed  \r\n\r\n| Command | Description  |\r\n|---|---|\r\n| `cut -d\"-\" 1,3 file_name` | prints the 1 and 3 column of the file, and - is delimeter |\r\n\r\n##**Shell Scripting Tutorial-14:** _Convert & Copy Files with 'dd'_ ##\r\n\r\n### Usage of 'dd' ###\r\n\r\nconverts all characters from lowercase to uppercase in a file.  \r\n`dd if=test of=test1 conv=ucase`  \r\n\r\nconverts encoding to european based encoding.  \r\n`dd if=test of=test2 conv=ebcdic`  \r\n\r\n| Command | Description |\r\n|---|---|\r\n| `dd if=test of=test1 conv=ucase` | converts all lowercase to uppercase in a new file |\r\n| `dd if=test of=test2 conv=ebcdic` | converts encoding to european based encoding |\r\n\r\n##**Shell Scripting Tutorial-15:** _Get Help, View Fancy Text & Reduce File Size_ ##\r\n\r\n### Getting Help ###\r\n\r\n`man <command name>` shows the help manual of the command.  \r\n`man cat`  \r\n\r\nexiting manual page by using Q key.  \r\n\r\n### View Fancy Text ###\r\n\r\n`banner my name is mustafa celik`  \r\n`banner \"my name is mustafa celik\"` banner shows 10 character in one line.    \r\n\r\n### Reduce File Size ###\r\n\r\nreducing the size of a file.  \r\n`compress -v test`  \r\n\r\nprinting compressed file in a readable format.  \r\n`zcat -v test.Z`  \r\n\r\nuncompressing the compressed file.  \r\n`uncompress test.Z`  \r\n\r\n| Command | Description |\r\n|---|---|\r\n| `man <command>` | shows the manuel of the command. Note: use Q key to quit. |\r\n| `banner some text` | prints fancy text |\r\n| `banner \"some text\"` | prints fancy text in one line. Note: limited to 10 character. |\r\n| `compress -v test` | compresses the test file. |\r\n| `zcat -v test.Z` | prints the readable version of the compressed file. |\r\n| `uncompress test.Z` | uncompress the compressed file. |\r\n\r\n##**Shell Scripting Tutorial-16:** _Hello World!_ ##\r\n\r\nhello world example is implemented using `echo` command.  \r\n\r\n| Command | Description |\r\n|---|---|\r\n| `echo \"Hello World!\"` | prints hello world to terminal. |\r\n\r\n##**Shell Scripting Tutorial-17:** _Use Command in Your Script_ ##\r\n\r\nUse commands in the script.  \r\n`pwd`  \r\n`ls -l`  \r\n`banner \"The End\"`  \r\n\r\n\r\n\r\n##**Shell Scripting Tutorial-18:** _Shell Variables, Grab User Input Using 'read'_ ##\r\n\r\n### Shell Variables ###\r\n\r\nShell scripting has some rules for variables.  \r\n- variable names starts with an **alphabet** or **underscore** symbol.  \r\n- variables are case sensitive. `my_var` and `MY_VAR` are different variables.  \r\n\r\n### Grab User Input Using 'read' ###\r\n**read** is used to get user input from terminal.  \r\n`echo \"Enter your name: \"`  \r\n`read name`  \r\n\r\n| Command | Description |\r\n|---|---|\r\n| `read name` | reads input from user and assign it to name variable |\r\n\r\n##**Shell Scripting Tutorial-19:** _Positional Parameters_ ##\r\n\r\nRenaming a file using one positional parameter.  \r\n\r\n\r\n##**Shell Scripting Tutorial-20:** _More on Positional Parameters_ ##\r\n\r\nsetting positional parameters from the content of a file.  \r\n`set cat test` this usage is wrong which assigns $1:cat and $2:test  \r\n`echo $*`  \r\n\"set \\`cat test\\`\"  this assigns file content as parameters  \r\n`cat test`  \r\n`echo $*`  \r\n\r\nözetle  \r\nreverse quotes: ters tirnak isareti  \r\naccent grave: tirnak arasinda komut calistirilan kisim  \r\n\r\n| Command | Description |\r\n|---|---|\r\n| set ``cat test`` | assigns content of test file to positional parameters |\r\n| set ``who am i`` | assigns output of the command to positional parameters |\r\n\r\n\r\n##**Shell Scripting Tutorial-21:** _Reverse Quotes & Accent Graves_ ##\r\n\r\n`set shell scripting is cool`  \r\n`echo $1`  \r\n`echo $2`  \r\n`echo $3`  \r\n`echo $4`  \r\n\r\n| Command | Description |\r\n|---|---|\r\n| `set word1 word2 word3` | assigns $1: word1 $2: word2 and $3: word3 |\r\n| `echo $*` | prints all positional parameters |\r\n\r\n\r\n##**Shell Scripting Tutorial-22:** _Count the Number of Command Line Arguments Using '$#'_ ##\r\n\r\nFinding number of positional parameters that comes from **command line** and **`set`** command.  \r\n`set this is video tutorial about shell scripting`  \r\n`echo $#`  \r\n\r\n| Command | Description |\r\n|---|---|\r\n| `echo $#` | prints the number of parameter. |\r\n\r\n##**Shell Scripting Tutorial-23:** _Math on Integers Using 'expr'_ ##\r\n\r\narithmetic operations on shell script.  \r\n\"a=30 b=15\"  \r\n\"echo ``expr $a + $b``\"  \r\n\"echo ``expr $a - $b``\"  \r\n\"echo ``expr $a \\* $b``\"  \r\n\"echo ``expr $a / $b``\"  \r\n\"echo ``expr $a % $b``\"  \r\n\r\n| Command | Description |\r\n|---|---|\r\n|echo ``expr $a + $b``| addition |\r\n|echo ``expr $a - $b``| substraction |\r\n|echo ``expr $a \\* $b``| multiplication |\r\n|echo ``expr $a / $b``| division |\r\n|echo ``expr $a % $b``| modular division |\r\n\r\n##**Shell Scripting Tutorial-24:** _Operator Precedence_ ##\r\n\r\n/, *, % operations have first priority.  \r\n+, - operations have second priority.  \r\n\r\necho ``expr $a \\* \\( $b + $c \\) / $d``  \r\n\r\n| Command | Description |\r\n|---|---|\r\n| echo ``expr $a \\* \\( $b + $c \\) / $d``   | operation precedence using \\ |\r\n\r\n##**Shell Scripting Tutorial-25:** _Math on Real Numbers_ ##\r\n\r\n**bc** usage is explained in this tutorial.  \r\n`echo $a + $b | bc`  \r\n`echo $a - $b | bc`  \r\n`echo $a \\* $b | bc`  \r\n`echo $a / $b | bc`  \r\n\r\n\r\n| Command | Description |\r\n|---|---|\r\n| `echo $a + $b | bc` | bs is used for floating point operations with pipe(|) |\r\n\r\n##**Shell Scripting Tutorial-26:** _Escape Sequences_ ##\r\n\r\ncustomizing(text color, border etc.) the **echo** outputs.  \r\n- new line: **\\n** -> `echo \"hello \\nworld\"`  \r\n- return: **\\r** -> `echo \"hello \\rworld\"` basa donerek üzerine yazar.  \r\n- tab: **\\t** -> `echo \"hello \\tworld\"`  \r\n- backspace:  **\\b** -> `echo \"Hey World, \\b\\b\\b\\b\\b\\b\\bwhat's up?\"` bir onceki karakterin uzerine yaziyor.  \r\n- bold: **\\033[1m** **\\033[0m** -> `echo \"\\033[1mHey World, what's up?\\033[0m\"` writes the text in bold format  \r\n- black background: **\\033[7m** **\\033[0m** -> `echo \"\\033[7mHey World, what's up?\\033[0m\"` prints black background  \r\n\r\n| Command | Description |\r\n|---|---|\r\n| `echo \"hello \\nworld\"` | new line |\r\n| `echo \"hello \\rworld\"` | return character writes from the beginning over the previous print |\r\n| `echo \"hello \\tworld\"` | tab character |\r\n| `echo \"Hey World, \\b\\b\\b\\b\\b\\b\\bwhat's up?\"` | backspace comes 1 character back |\r\n| `echo \"\\033[1mHey World, what's up?\\033[0m\"` | bold character |\r\n| `echo \"\\033[7mHey World, what's up?\\033[0m\"` | black background |\r\n\r\n##**Shell Scripting Tutorial-27:** _Do Cool Things with 'tput'_ ##\r\n\r\nclearing terminal.  \r\n`tput clear`  \r\ndetermining the number of rows and  columns of the terminal.  \r\n`tput lines` shows number of rows.  \r\n`tput cols` shows number of columns.  \r\nprinting character in bold.  \r\n`tput bold`  \r\npositioning the cursor to a specific row and column.  \r\n`tput cup 15 20`  \r\n\r\n\r\n| Command | Description |\r\n|---|---|\r\n| `tput clear` | clear the terminal |\r\n| `tput lines`| Total number of rows on screen |\r\n| `tput cols`| Total number of columns on screen|\r\n| `tput cup 15 20`| position cursor to new row and column |\r\n| `tput bold`| print in bold format |\r\n| `echo \"\\033[0mbye bye\"`| ends printing in bold |\r\n\r\n##**Shell Scripting Tutorial-28:** _'if-then' Statement in Action_ ##\r\n\r\nterminalde her komut calistiktan sonra, komutun basarili olup olmadigini gosteren bir sayi doner.  \r\nbu ciktiyi gormek icin su komut kullanilir:\r\n`mkdir new`  \r\n`echo $?`  \r\n\r\nrenaming a file using if statement.  \r\n`if mv source.txt target.txt`  \r\n`then`  \r\n`echo \"Your file has been succesfully renamed.\"`  \r\n`fi`  \r\n\r\n| Command |\r\n|---|\r\n|usage of if-then statement |\r\n| `if something_true` | \r\n| `then` |\r\n| `echo \"condition is correct\"` |\r\n| `fi` |\r\n\r\n##**Shell Scripting Tutorial-29:** _The 'if-then-else' Statement_ ##\r\n\r\nrenaming a file using if statement.  \r\n`if mv source.txt target.txt`  \r\n`then`  \r\n`echo \"Your file has been successfully renamed.\"`  \r\n`else`\r\n`echo \"file has NOT been  renamed.\"`\r\n`fi`  \r\n\r\n| Command |\r\n|---|\r\n|usage of if-then statement |\r\n| `if something_true_or_false` | \r\n| `then` |\r\n| `echo \"condition is true\"` |\r\n| `else`|\r\n| `echo \"condition is false\"`|\r\n| `fi` |\r\n\r\n##**Shell Scripting Tutorial-30:** _Run Checks on Numbers_ ##\r\n\r\nif checks statements are following:  \r\n`num=3`  \r\n`if [ $num -eq 10]`  \r\n`then`  \r\n    `echo \"it is equal to 10\"`  \r\n`elif [ $num -lt 10 ]`  \r\n`then`  \r\n    `echo \"less than 10\"`  \r\n`elif [ $num -gt 10 ]`  \r\n`then`  \r\n    `echo \"greater than 10\"`  \r\n`elif [ $num -le 10 ]`  \r\n`then`  \r\n    `echo \"less than and equal to 10\"`  \r\n`elif [ $num -ge 10 ]`  \r\n`then`  \r\n    `echo \"greater than and equal to 10\"`  \r\n`elif [ $num -ne 10 ]`  \r\n`then`\r\n    `echo \"not equal\"`  \r\n    \r\n| Command | Description |\r\n|---|---|\r\n| `-eq` | equal |\r\n| `-lt` | less than |\r\n| `-gt` | greater than |\r\n| `-le` | less than and equal |\r\n| `-ge `| greater than and equal |\r\n| `-ne` | not equal |\r\n\r\n##**Shell Scripting Tutorial-31:** _Run Checks on Files_ ##\r\n\r\n**character space file**: text files  \r\n**block space file**: video and image files which can not be displayed by text editor  \r\n**directory space file**: folders are also a file  \r\n\r\n`if [ -f $fname ]` checks is it file or not.  \r\n\r\n**-f**: checks for file  \r\n**-d**: checks for directory  \r\n**-c**: checks for character space file(text file)  \r\n**-b**: checks for block space file(image, video)  \r\n**-r**: checks read permission  \r\n**-w**: checks write permission  \r\n**-x**: checks execute permission  \r\n**-s**: checks if the file size is greater 0 or not  \r\n\r\n| Command | Description |\r\n|---|---|\r\n|`if [ -f $fname ]`| checks file or not |\r\n|`if [ -d $fname ]`| checks directory or not |\r\n|`if [ -c $fname ]`| checks character space file or not |\r\n|`if [ -b $fname ]`| checks block space file or not |\r\n|`if [ -r $fname ]`| checks has read permission or not |\r\n|`if [ -w $fname ]`| checks has write permission or not |\r\n|`if [ -x $fname ]`| checks has execute permission or not |\r\n|`if [ -s $fname ]`| checks size is greater than 0 or not |\r\n\r\n##**Shell Scripting Tutorial-32:** _Append Text to a File Through Shell Script_ ##\r\n\r\nusage of the if else statement and file checks command.  \r\nexample code:\r\n`echo \"Enter file name:\\c\"`  \r\n`read fname`  \r\n`if [ -f $fname ]`  \r\n`then`  \r\n`    if [ -w $fname ]`  \r\n`    then`  \r\n`        echo \"Type matter to append. To quit press ctrl+d.\"`  \r\n`        cat >> $fname`  \r\n`    else`  \r\n`        echo \"You do not have permission to write.\"`  \r\n`    fi`  \r\n`fi`  \r\n\r\n##**Shell Scripting Tutorial-33:** _Run Checks on Strings_ ##\r\n\r\nstring checks:  \r\n\r\n| Command | Description |\r\n|---|---|\r\n| `[ \"$str1\" = \"$str2\" ]` | checks if string are equal |\r\n| `[ \"$str1\" != \"$str2\" ]` | checks if string are not equal |\r\n| `[ -n \"$str1\"` | checks if string length is greater than zero |\r\n| `[ -z \"$str1\" ]` | checks if string length is zero | \r\n\r\n##**Shell Scripting Tutorial-34:** _Run Checks on StringThe 'AND' Logical Operator_ ##\r\n\r\n**-a** is the 'AND' operator for shell scripting.  \r\nFollowing if statement checks the variable if it is between 50 and 100.  \r\n`if [ $num -le 100 -a $num -ge 50 ]`  \r\n\r\n| Command | Description |\r\n|---|---|\r\n| `if [ $num -le 100 -a $num -ge 50 ]` | usage of AND operator |  \r\n\r\n\r\n##**Shell Scripting Tutorial-35:** _Count the Number of Characters in User's Input in Your Script_ ##\r\n\r\nchecking the number of the character of the variable.  \r\n`if [ 'echo $var | wc -c' -eq 2 ]`\r\n\r\n| Command | Description |\r\n|---|---|\r\n| `if [ 'echo $var | wc -c' -eq 2 ]` | check if there is one character or not. 2 because of enter character. |\r\n\r\n\r\n##**Shell Scripting Tutorial-36:** _The 'OR' Logical Operator_ ##\r\n\r\n**-0** is the 'OR' operator for shell scripting.  \r\nFollowing if statement checks the variable if it is vowel or not.  \r\n`if [ $var  = a -o $var  = e -o $var  = i -o $var  = u -o $var  = o ]`  \r\n\r\n| Command | Description |\r\n|---|---|\r\n| `if [ $var  = a -o $var  = e -o $var  = i -o $var  = u -o $var  = o ]` | usage of OR operator |\r\n  \r\n  ##**Shell Scripting Tutorial-37:** _The 'case' Statement_ ##\r\n\r\nThe case statement is the fourth version of the condition statements.  \r\n1. if\r\n2. if else\r\n3. elif\r\n4. case\r\n\r\nusage of case statement:  \r\n`echo \"Enter a character:\\c\"`  \r\n`read var`  \r\n  \r\n`case $var in`  \r\n`[a-z])`  \r\n`    echo \"You entered a lowercase character.\"`  \r\n`    ;;`  \r\n`[A-Z])`  \r\n`    echo \"You entered an uppercase character.\"`  \r\n`    ;;`  \r\n`[0-9])`  \r\n`    echo \"You entered a digit.\"`  \r\n`    ;;`  \r\n`?)`  \r\n`    echo \"You entered a special character.\"`  \r\n`    ;;`  \r\n`*)`  \r\n`    echo \"You entered more than one character.\"`  \r\n`    ;;`  \r\n`esac`  \r\n\r\n##**Shell Scripting Tutorial-38:** _Another Date with 'case' Statement_ ##\r\n\r\nAnother example of case statement.  \r\n\r\n`echo \"Enter a word:\\c\"`  \r\n`read word`  \r\n``  \r\n`case $word in`  \r\n`[aeiou]* | [AEIOU]*)`  \r\n`    echo \"The words begins with a vowel.\"`  \r\n`    ;;`  \r\n`[0-9]*)`  \r\n`    echo \"The words begins with a digit.\"`  \r\n`    ;;`  \r\n`*[0-9])`  \r\n`    echo \"The words ends with a digit.\"`  \r\n`    ;;`  \r\n`???)`  \r\n`    echo \"The words is a 3-letter word.\"`  \r\n`    ;;`  \r\n`*)`  \r\n`    echo \"Something else.\"`  \r\n``    ;;`  \r\nesac`  \r\n\r\n\r\n##**Shell Scripting Tutorial-39:** _The 'while' Loop_ ##\r\n\r\nusage of 'while' loop.  \r\ndisplay the number 1 to 10.  \r\n\r\n`count=1`  \r\n`while [ $count -le 10 ]`  \r\n`do`  \r\n`    echo $count`  \r\n    count=`expr $count + 1`  \r\n`done`  \r\n\r\n| Command | Description |\r\n|---|---|\r\n|`while [ $count -le 10 ]`| usage of while loop |\r\n|`do`||\r\n|`    echo $count`||\r\n|`done`  ||\r\n\r\n\r\n##**Shell Scripting Tutorial-40:** _The 'until' Loop_ ##\r\n\r\nusage of until loop.  \r\ndisplay the numbers 1 to 10.  \r\n\r\n`count=1`  \r\n`until [ $count -gt 10 ]`  \r\n`do`  \r\n`    echo $count`  \r\n    count=`expr $count + 1`  \r\n`done`  \r\n\r\n| Command | Description |\r\n|---|---|\r\n|`until [ $count -gt 10 ]`| usage of until loop |\r\n|`do`||\r\n|`    echo $count`||\r\n|`done`  ||\r\n\r\n##**Shell Scripting Tutorial-41:** _The 'for' Loop_ ##\r\n\r\nusage of for loop.  \r\nfor loop is pretty different than until and while loop.  \r\n\r\n| Command | Description |\r\n|---|---|\r\n|`for item in *`| usage of for loop. * means all items in current directory |\r\n|`do`||\r\n|`...`||\r\n|`done`||\r\n\r\n\r\n##**Shell Scripting Tutorial-42:** _Rant & Little Work_ ##\r\n\r\ncomparison of real number.  \r\n\r\nanother comparison for floating point numbers.  \r\nmin=12.45  \r\nval=10.35  \r\n\r\nif [ 1 -eq \"$(echo \"${val} < ${min}\" | bc)\" ]  \r\nthen    \r\n    min=${val}   \r\nfi  \r\n\r\necho \"$min\"  \r\n  \r\n| Command | Description |\r\n|---|---|\r\n|`[ $a -eq $b ]`| this is for integers and not working for real numbers |\r\n|`[ \"$a\" = \"$b\" ]`| this converts number to string and compares them |\r\n|`min=12.45`| another comparison example for floating point numbers |  \r\n|`val=10.35`|  \r\n|`if [ 1 -eq \"$(echo \"${val} < ${min}\" | bc)\" ]`|  \r\n|`then`|    \r\n|`    min=${val}`|   \r\n|`fi`|  \r\n|`echo \"$min\"`|  \r\n\r\n##**Shell Scripting Tutorial-43:** _Search Patterns Using 'grep'_ ##\r\n\r\nUsage of 'grep' command.  \r\n**grep** is same as using **ctrl+f** option in a file.  \r\n\r\n**grep -i**: ignores case sensitivity\r\n**grep -n**: shows line numbers for search results.\r\n**grep -c**: shows the total number of the line that has money.\r\n**grep -v**: shows the grep result for not matching lines.\r\n\r\n| Command | Description |\r\n|---|---|\r\n| `grep money text_file` | search \"money\" in text_file |\r\n| `grep -i money text_file` | search \"money\" in text_file by ignoring case sensitivity. |\r\n| `grep -i -n money text_file` | search \"money\" in text_file by ignoring case sensitivity, and shows line numbers |\r\n| `grep -i -c money text_file` | search \"money\" in text_file by ignoring case sensitivity, and shows count of money line |\r\n| `grep -i -v money text_file` | search \"money\" in text_file by ignoring case sensitivity, and shows the lines that has no money |\r\n\r\n \r\n ##**Shell Scripting Tutorial-44:** _The 'passwd' File Explained_ ##\r\n\r\nUsage of file \"passwd\".  \r\n\r\n`cat /etc/passwd` command shows the content of passwd file.  \r\n**joker:x:1000:1000:joker,,,:/home/joker:/bin/bash**  \r\n\r\nfiled 1 -> **joker**: user name  \r\nfield 2 -> **x**: password is encrypted for the user  \r\nfield 3 -> **1000**: uid (userid). from 1 to 99 id are reserved for predefined accounts  \r\nfield 4 -> **1000**: group id.\r\nfield 5 -> **joker,,,**: the name of the computer\r\nfield 6 -> **/home/joker**: home folder\r\nfield 7 -> **/bin/bash**: shell \r\n\r\n| Command | Description |\r\n|---|---|\r\n| `cat /etc/passwd` | shows info about the accounts of the computer |\r\n| `joker:x:1000:1000:joker,,,:/home/joker:/bin/bash` | output of the file |\r\n| `joker` | field 1: username |\r\n| `x` | field 2: password |\r\n| `1000` | field 3: user id |\r\n| `1000` | field 4: group id |\r\n| `joker,,,` | field 5: name of the computer |\r\n| `/home/joker` | field 6: home folder of the user |\r\n| `/bin/bash` | field 7: shell |\r\n\r\n\r\n##**Shell Scripting Tutorial-45:** _The Internal Field Separator_ ##\r\n\r\nUsage of IFS (internal field separator)   \r\n\r\n`set this is the forty fifth tutorial.` sets the positional parameter  \r\n\r\ndefault IFS character is space. It can be changed as following:  \r\n`IFS=:` so, IFS is changed to :  \r\n\r\n| Command | Description |\r\n|---|---|\r\n| `IFS=:` | Internal file separator is changed |\r\n\r\n\r\n##**Shell Scripting Tutorial-46:** _'passwd' File Revisited_ ##\r\n\r\nExample of using passwd file, IFS, grep and set command.\r\n\r\n`echo \"Enter Username:\\c\"`  \r\n`read logname`  \r\n  \r\n`# takes the line that is associated with the username`  \r\n`line='grep $logname /etc/passwd'`  \r\n  \r\n`IFS=: # the separator is : in passwd file`  \r\n`set $line`  \r\n  \r\n`echo \"Username:$1\"`  \r\n`echo \"User ID: $3\"`  \r\n`echo \"Group ID: $4\"`  \r\n`echo \"Comment Field: $5\"`  \r\n`echo \"Home Folder: $6\"`  \r\n`echo \"Default shell: $7\"`  \r\n\r\n##**Shell Scripting Tutorial-47:** _Reading From a File_ ##\r\n\r\nFirst, file should load to **exec**, at the same time current settings should be kept.  \r\n**terminal** variable holds the current settings and it assigns back the settings after reading operation.  \r\n\r\n`terminal='tty'`  \r\n`exec < $fname`  \r\n\r\n`while read line`   \r\n`do`  \r\n`    echo \"$line\"`  \r\n`done`  \r\n\r\n`exec < $terminal`  \r\n\r\n| Command | Description |\r\n|---|---|\r\n| `terminal='tty'` | takes the current settings of the terminal |\r\n| `exec < $fname` | loads the file content |\r\n| ` while read line` | reads the line of the exec which is $fname in this case |\r\n\r\n##**Shell Scripting Tutorial-48:** _Sleep While You are at Work_ ##\r\n\r\nUsage of **sleep** command. Sleep makes a time delay on the execution of shell.  \r\n\r\n| Command | Description |\r\n|---|---|\r\n| `sleep 5` | shell execution sleeps 5 seconds |\r\n\r\n\r\n##**Shell Scripting Tutorial-49:** _Count the number of words & sentences in a text file without using 'wc'_ ##\r\n\r\nAn example is ran.  ##**Shell Scripting Tutorial-50:** _Fetch & Redirect Man Pages of commands using 'for loop'_ ##\r\n\r\n\r\n| Command | Description |\r\n|---|---|\r\n| `man cat >> helpfile` | appends output of man command to helpfile |\r\n| `for cmd in 'cat commandlist'` | for loop iteration of a file |\r\n\r\n\r\n##**Shell Scripting Tutorial-51:** _Nested Loops_ ##\r\n\r\nExample for nested loop.  \r\n\r\n`a=1`  \r\n`while [ $a -le 3 ]`  \r\n`do`  \r\n`    b=1`  \r\n`    while [ $b -le 3 ]`  \r\n`    do`  \r\n`        c=1`  \r\n`        while [ $c -le 3 ]`  \r\n`        do`  \r\n`            echo \"$a$b$c\"`  \r\n`            c='expr $c + 1`  \r\n`        done`  \r\n`        b='expr $b + 1''`  \r\n`    done`  \r\n`    a='expr $a + 1'`  \r\n`done`  \r\n\r\n##**Shell Scripting Tutorial-52:** _The 'break' Statement_ ##\r\n\r\nbreak terminates the loop.  \r\n\r\n| Command | Description |\r\n|---|---|\r\n| `break` | ends the loop iteration |\r\n\r\n\r\n##**Shell Scripting Tutorial-53:** _The 'continue' Statement_ ##\r\n\r\ncontinue sends execution the beginning of the loop.  \r\n\r\n| Command | Description |\r\n|---|---|\r\n| `continue` | returns back to start of loop |\r\n\r\n##**Shell Scripting Tutorial-54:** _More on Metacharacters_ ##\r\n\r\nRunning more than one command a line.  \r\n`ls ; cal ; banner \"mustafa celik\"`\r\n\r\n| Command | Description |\r\n|---|---|\r\n| `ls ; cal ; banner \"hello\"` | running more than one command |\r\n| `grep -i money text_tutorial_54 > pattern && echo \"Task was completed.\"`| && works if first part is ok|\r\n\r\n##**Shell Scripting Tutorial-55:** _Adding & Removing Users_ ##\r\n\r\nby using GUI user can be added and deleted.  \r\n\r\n| Command | Description |\r\n|---|---|\r\n| `sudo login` | change the user |\r\n\r\n\r\n##**Shell Scripting Tutorial-56:** _Know when users log in Part One_ ##\r\n\r\nlogin example.   \r\n\r\n##**Shell Scripting Tutorial-57:** _Know when users log in Part Two_ ##\r\n\r\nexample of login.\r\n\r\n| Command | Description |\r\n|---|---|\r\n| `grep \"$logname\" /etc/passwd > /dev/null` | checking the user exists or not |\r\n| `if [ $? -eq 0 ]`||\r\n\r\n##**Shell Scripting Tutorial-58:** _Know when users log in Final Part_ ##\r\n\r\nloging example is implemented.  \r\n\r\n##**Shell Scripting Tutorial-59:** _Communicate with other users using 'write'_ ##\r\n\r\nBoth users must be logged in different terminals.  \r\n\r\n`write username`  the writer command.  \r\n`mesg -y` the receiver command.  \r\n\r\n`finger` shows the terminal of other users.  \r\n\r\n| Command | Description |\r\n|---|---|\r\n| `write username` | message command |\r\n| `mesg -y`| receiver command to take messages |\r\n| `finger` | terminal list for messaging |\r\n\r\n\r\n##**Shell Scripting Tutorial-60:** _Create Your Own Commands Using Functions_ ##\r\n\r\nfollowing is the function usage.  \r\nrun the following command to initialize the function:  \r\n`$ . function_script.sh`\r\n\r\n`youtube()`  \r\n`{`  \r\n\t`echo \"Good Morning.\"`  \r\n`}`  \r\n`byebye()`  \r\n`{`  \r\n\t`cal`  \r\n`}`  \r\n\r\nuse following command to release the function:  \r\n`$ unset youtube`\r\n\r\n| Command | Description |\r\n|---|---|\r\n| `unset youtube` | removes the function |\r\n\r\n\r\n##**Shell Scripting Tutorial-61:** _Executing Multiple Scripts_ ##\r\n\r\nScript should run at the last line of the previous script. \r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}